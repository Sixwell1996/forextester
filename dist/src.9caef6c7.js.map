{"version":3,"sources":["../src/models/Bar.ts","../src/services/DataLoader.ts","../src/components/Viewport.ts","../src/components/Renderer.ts","../src/components/EventHandler.ts","../src/components/Chart.ts","../src/components/ChartManager.ts","../src/index.ts","../node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["OVERLAY_ID","OldModule","module","bundle","Module","moduleName","call","hot","data","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","push","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","event","JSON","parse","type","handled","assets","forEach","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","id","every","generated","js","console","clear","hmrApply","v","hmrAcceptRun","reload","close","onclose","log","removeErrorOverlay","error","message","stack","overlay","createErrorOverlay","document","body","appendChild","getElementById","remove","createElement","stackTrace","innerText","innerHTML","getParents","modules","parents","k","d","dep","Array","isArray","length","concat","Function","deps","cached","cache","some","cb"],"mappings":"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","file":"src.9caef6c7.js","sourceRoot":"../public","sourcesContent":["export class Bar {\n    time: Date;\n    open: number;\n    high: number;\n    low: number;\n    close: number;\n    tickVolume: number;\n\n    constructor(data: any, chunkStart: number) {\n        this.time = new Date((chunkStart + data.Time) * 1000);\n        this.open = data.Open;\n        this.high = data.High;\n        this.low = data.Low;\n        this.close = data.Close;\n        this.tickVolume = data.TickVolume;\n    }\n}\n","import { Bar } from '../models/Bar';\n\nexport class DataLoader {\n    async fetchData(url: string): Promise<Bar[]> {\n        try {\n            const response = await fetch(url);\n            const jsonData = await response.json();\n            const bars: Bar[] = [];\n\n            const chunkStart = jsonData[0].ChunkStart;\n            jsonData[0].Bars.forEach((barData: any) => {\n                bars.push(new Bar(barData, chunkStart));\n            });\n\n            return bars;\n        } catch (error) {\n            console.error('Error fetching data:', error);\n            return [];\n        }\n    }\n}\n","import {Bar} from \"../models/Bar\";\n\nexport class Viewport {\n    offset: number; // Horizontal offset for scrolling\n    scale: number;  // Scale factor for zooming\n    barWidth: number;\n    minPrice: number;\n    maxPrice: number;\n    canvasWidth: number;\n    gapPercentage: number;\n\n    constructor(canvasWidth: number) {\n        this.offset = 0;\n        this.scale = 1;\n        this.barWidth = 5;\n        this.canvasWidth = canvasWidth;\n        this.minPrice = Infinity;\n        this.maxPrice = -Infinity;\n        this.gapPercentage = 0.2;\n    }\n\n    updatePriceRange(bars: Bar[]) {\n        const {visibleBars} = this.getVisibleBars(bars);\n        if (visibleBars.length > 0) {\n            this.minPrice = Math.min(...visibleBars.map(bar => bar.low));\n            this.maxPrice = Math.max(...visibleBars.map(bar => bar.high));\n        }\n    }\n\n    getVisibleBars(bars: Bar[]): { visibleBars: Bar[]; startIndex: number } {\n        const totalBarSpace = this.getTotalBarSpace();\n\n        const barsInView = Math.ceil(this.canvasWidth / totalBarSpace);\n        const totalBars = bars.length;\n        const maxOffset = Math.max(totalBars * totalBarSpace - this.canvasWidth, 0);\n        this.offset = Math.max(0, Math.min(this.offset, maxOffset));\n\n        const startIndex = Math.floor(this.offset / totalBarSpace);\n        const endIndex = Math.min(startIndex + barsInView + 1, totalBars);\n\n        const visibleBars = bars.slice(startIndex, endIndex);\n\n        return { visibleBars, startIndex };\n    }\n\n    getXPosition(globalIndex: number): number {\n        const totalBarSpace = this.getTotalBarSpace();\n        return globalIndex * totalBarSpace - this.offset;\n    }\n\n    getBarWidthWithScale(): number {\n        return this.barWidth * this.scale;\n    }\n\n    getGapSize(): number {\n        return this.getBarWidthWithScale() * this.gapPercentage;\n    }\n\n    getAdjustedBarWidth(): number {\n        return Math.max(this.getBarWidthWithScale() - this.getGapSize(), 1);\n    }\n\n    getTotalBarSpace(): number {\n        return this.getAdjustedBarWidth() + this.getGapSize();\n    }\n\n    getGlobalIndexAtX(x: number): number {\n        return Math.floor((x + this.offset) / this.getTotalBarSpace());\n    }\n\n    zoom(factor: number) {\n        // Update the scale factor within reasonable limits\n        const newScale = this.scale * factor;\n        this.scale = Math.max(0.5, Math.min(newScale, 5));\n    }\n\n    scroll(delta: number) {\n        // Update the offset based on scroll delta\n        this.offset += delta;\n    }\n}\n","import {Bar} from \"../models/Bar\";\nimport {Viewport} from \"./Viewport\";\n\nexport class Renderer {\n    private ctx: CanvasRenderingContext2D;\n    private width: number = 0;\n    private height: number = 0;\n    private pixelRatio: number;\n\n    constructor(private canvas: HTMLCanvasElement) {\n        this.ctx = canvas.getContext('2d')!;\n        this.pixelRatio = window.devicePixelRatio || 1;\n        this.adjustCanvasResolution();\n    }\n\n    adjustCanvasResolution() {\n        // Adjust the canvas resolution for high-DPI screens\n        this.width = this.canvas.clientWidth * this.pixelRatio;\n        this.height = this.canvas.clientHeight * this.pixelRatio;\n        this.canvas.width = this.width;\n        this.canvas.height = this.height;\n        this.ctx.scale(this.pixelRatio, this.pixelRatio);\n    }\n\n    drawBars(bars: Bar[], viewport: Viewport) {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n        const barWidth = viewport.barWidth * viewport.scale;\n        const gapSize = barWidth * viewport.gapPercentage;\n        const adjustedBarWidth = Math.max(barWidth - gapSize, 1);\n\n        const {visibleBars, startIndex} = viewport.getVisibleBars(bars);\n        const maxPrice = viewport.maxPrice;\n        const minPrice = viewport.minPrice;\n        const chartHeight = this.canvas.height / this.pixelRatio;\n\n        visibleBars.forEach((bar, i) => {\n            const globalIndex = startIndex + i;\n            const x = viewport.getXPosition(globalIndex);\n            const xAdjusted = x + gapSize / 2;\n\n            const openY = this.priceToY(bar.open, minPrice, maxPrice, chartHeight);\n            const closeY = this.priceToY(bar.close, minPrice, maxPrice, chartHeight);\n            const highY = this.priceToY(bar.high, minPrice, maxPrice, chartHeight);\n            const lowY = this.priceToY(bar.low, minPrice, maxPrice, chartHeight);\n\n            const isBullish = bar.close >= bar.open;\n            this.ctx.fillStyle = isBullish ? '#26a69a' : '#ef5350';\n            this.ctx.strokeStyle = this.ctx.fillStyle;\n\n            // Draw the candle wick\n            const wickX = xAdjusted + adjustedBarWidth / 2;\n            this.ctx.beginPath();\n            this.ctx.moveTo(wickX, highY);\n            this.ctx.lineTo(wickX, lowY);\n            this.ctx.stroke();\n\n            // Draw the candle body\n            const bodyHeight = Math.abs(closeY - openY);\n            const bodyY = Math.min(openY, closeY);\n            this.ctx.fillRect(\n                xAdjusted,\n                bodyY,\n                adjustedBarWidth,\n                bodyHeight > 0 ? bodyHeight : 1\n            );\n        });\n\n        this.drawScales(bars, viewport);\n    }\n\n\n    private priceToY(price: number, minPrice: number, maxPrice: number, chartHeight: number): number {\n        // Convert a price to a Y coordinate on the canvas\n        const priceRange = maxPrice - minPrice;\n        return ((maxPrice - price) / priceRange) * chartHeight;\n    }\n\n    private drawScales(bars: Bar[], viewport: Viewport) {\n        const ctx = this.ctx;\n        ctx.fillStyle = '#000';\n        ctx.font = '12px Arial';\n        const padding = 5;\n\n        // Draw price scale on the right\n        const priceSteps = 5;\n        const priceStepSize = (viewport.maxPrice - viewport.minPrice) / priceSteps;\n\n        for (let i = 0; i <= priceSteps; i++) {\n            const price = viewport.minPrice + i * priceStepSize;\n            const y = this.priceToY(price, viewport.minPrice, viewport.maxPrice, this.height / this.pixelRatio);\n            console.log(price.toFixed(5), this.width / this.pixelRatio);\n            ctx.fillText(price.toFixed(5), this.width / this.pixelRatio - 50, y);\n        }\n\n        if (bars.length === 0) {\n            return;\n        }\n\n        // Draw date labels at the bottom\n        const dateSteps = 5;\n        const totalBars = bars.length;\n\n        for (let i = 0; i <= dateSteps; i++) {\n\n            let x = (this.width / this.pixelRatio) * (i / dateSteps);\n\n            if (i === 0) {\n                x = padding;\n                ctx.textAlign = 'left';\n            } else if (i === dateSteps) {\n                x = (this.width / this.pixelRatio) - padding;\n                ctx.textAlign = 'right';\n            } else {\n                ctx.textAlign = 'center';\n            }\n\n            // Calculate the global index (bar index) at this x position\n            const globalIndex = viewport.getGlobalIndexAtX(x);\n\n            if (globalIndex >= 0 && globalIndex < totalBars) {\n                const bar = bars[globalIndex];\n                const dateStr = this.formatDate(bar.time);\n\n                ctx.fillText(\n                    dateStr,\n                    x,\n                    this.height / this.pixelRatio - 10\n                );\n            }\n            ctx.textAlign = 'left';\n        }\n    }\n\n    private formatDate(date: Date): string {\n        // Format date to display on the chart (e.g., \"HH:MM\")\n        const hours = date.getHours().toString().padStart(2, '0');\n        const minutes = date.getMinutes().toString().padStart(2, '0');\n        return `${hours}:${minutes}`;\n    }\n}\n","import {Viewport} from \"./Viewport\";\n\nexport class EventHandler {\n    private isDragging: boolean = false;\n    private lastX: number = 0;\n\n    constructor(\n        private canvas: HTMLCanvasElement,\n        private viewport: Viewport,\n        private renderCallback: () => void\n    ) {\n        this.initEvents();\n    }\n\n    private initEvents() {\n        this.canvas.addEventListener('wheel', this.onWheel.bind(this), { passive: false });\n        this.canvas.addEventListener('mousedown', this.onMouseDown.bind(this));\n        this.canvas.addEventListener('mousemove', this.onMouseMove.bind(this));\n        this.canvas.addEventListener('mouseup', this.onMouseUp.bind(this));\n        this.canvas.addEventListener('mouseleave', this.onMouseUp.bind(this));\n    }\n\n    private onWheel(event: WheelEvent) {\n        event.preventDefault();\n        if (event.ctrlKey || event.metaKey) {\n            // Zooming\n            const zoomFactor = event.deltaY > 0 ? 0.9 : 1.1;\n            this.viewport.zoom(zoomFactor);\n        } else {\n            // Scrolling horizontally\n            this.viewport.scroll(event.deltaY);\n        }\n        this.renderCallback();\n    }\n\n    private onMouseDown(event: MouseEvent) {\n        this.isDragging = true;\n        this.lastX = event.clientX;\n    }\n\n    private onMouseMove(event: MouseEvent) {\n        if (this.isDragging) {\n            const deltaX = this.lastX - event.clientX;\n            this.viewport.scroll(deltaX);\n            this.lastX = event.clientX;\n            this.renderCallback();\n        }\n    }\n\n    private onMouseUp() {\n        this.isDragging = false;\n    }\n}\n","import {DataLoader} from \"../services/DataLoader\";\nimport {Bar} from \"../models/Bar\";\nimport {Viewport} from \"./Viewport\";\nimport {Renderer} from \"./Renderer\";\nimport {EventHandler} from \"./EventHandler\";\n\nexport class Chart {\n    private renderer: Renderer;\n    private dataLoader: DataLoader;\n    private viewport: Viewport;\n    private eventHandler: EventHandler;\n    private bars: Bar[] = [];\n\n    constructor(private canvas: HTMLCanvasElement, private dataUrl: string) {\n        this.renderer = new Renderer(canvas);\n        this.dataLoader = new DataLoader();\n        this.viewport = new Viewport(canvas.clientWidth);\n        this.eventHandler = new EventHandler(canvas, this.viewport, this.render.bind(this));\n\n        this.init();\n    }\n\n    private async init() {\n        this.bars = await this.dataLoader.fetchData(this.dataUrl);\n        this.render();\n\n        window.addEventListener('resize', this.onResize.bind(this));\n    }\n\n    private render() {\n        this.viewport.updatePriceRange(this.bars);\n        this.renderer.drawBars(this.bars, this.viewport);\n    }\n\n    private onResize() {\n        this.viewport.canvasWidth = this.canvas.clientWidth;\n        this.renderer.adjustCanvasResolution();\n        this.render();\n    }\n}\n","import {Chart} from \"./Chart\";\n\nexport class ChartManager {\n    private charts: Chart[] = [];\n\n    addChart(canvas: HTMLCanvasElement, dataUrl: string) {\n        const chart = new Chart(canvas, dataUrl);\n        this.charts.push(chart);\n    }\n}\n","import {ChartManager} from './components/ChartManager';\n\nconst canvas = document.getElementById('chartCanvas') as HTMLCanvasElement;\nconst dataUrl = 'https://beta.forextester.com/data/api/Metadata/bars/chunked?Broker=Advanced&Symbol=EURUSD&Timeframe=1&Start=57674&End=59113&UseMessagePack=false';\n\nconst chartManager = new ChartManager();\nchartManager.addChart(canvas, dataUrl);\n","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}